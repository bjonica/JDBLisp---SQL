/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.utexas.cs345.jdblisp.parser;

import edu.utexas.cs345.jdblisp.*;
public class Parser implements ParserConstants {

    private static Symbol QUOTE_SYMB = new Symbol("QUOTE");
    private static Symbol FUNCTION_SYMB = new Symbol("FUNCTION");

/**
 * sql_cmd -> sql_define | sql_control | sql_modify
 */
  static final public SQLcmd sql_cmd() throws ParseException {
  SExp s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALTER:
    case COMMENT:
    case CREATE:
    case DROP:
    case RENAME:
    case ANALYZE:
    case EXPLAIN:
      s = sql_define();
                       {if (true) return s;}
      break;
    default:
      jj_la1[0] = jj_gen;
      if (jj_2_1(2)) {
        s = sql_control();
                                    {if (true) return s;}
      } else if (jj_2_2(2)) {
        s = sql_modify();
                                   {if (true) return s;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * sql_define -> alter | comment | create | drop | rename | analyze | explain
 */
  static final public SQLdef sql_define() throws ParseException {
  Symbol s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALTER:
      jj_consume_token(ALTER);
      break;
    case COMMENT:
      jj_consume_token(COMMENT);
      break;
    case CREATE:
      jj_consume_token(CREATE);
      s = sql_create();
                                {if (true) return s;}
      break;
    case DROP:
      jj_consume_token(DROP);
      break;
    case RENAME:
      jj_consume_token(RENAME);
      break;
    case ANALYZE:
      jj_consume_token(ANALYZE);
      break;
    case EXPLAIN:
      jj_consume_token(EXPLAIN);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * sql_create -> database | table
 */
  static final public SQLcreate sql_create() throws ParseException {
  Token t; List colList;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATABASE:
      jj_consume_token(DATABASE);
      t = jj_consume_token(SYMB);
                              {if (true) return SQLQuery("CREATE DATABASE " + new Symbol(t.image));}
      break;
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_3(3)) {
        jj_consume_token(TABLE);
        t = jj_consume_token(SYMB);
                                        {if (true) return SQLQuery("CREATE TABLE " + new Symbol(t.image));}
      } else if (jj_2_4(3)) {
        jj_consume_token(TABLE);
        t = jj_consume_token(SYMB);
        colList = list();
                                                         {if (true) return SQLQuery("CREATE TABLE " + new Symbol(t.image) + listToSQL(colList));}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * sql_control -> audit | noaudit | grant | revoke | set role
 */
  static final public SQLctr sql_control() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUDIT:
      jj_consume_token(AUDIT);
      break;
    case NOAUDIT:
      jj_consume_token(NOAUDIT);
      break;
    case GRANT:
      jj_consume_token(GRANT);
      break;
    case REVOKE:
      jj_consume_token(REVOKE);
      break;
    case SET:
      jj_consume_token(SET);
      jj_consume_token(ROLE);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * sql_modify -> select | insert | update | delete | truncate | transaction | set transaction | lock
 */
  static final public SQLmod sql_modify() throws ParseException {
  Symbol s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      jj_consume_token(SELECT);
      s = sql_select();
                                  {if (true) return s;}
      break;
    case INSERT:
      jj_consume_token(INSERT);
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
      break;
    case DELETE:
      jj_consume_token(DELETE);
      break;
    case TRUNCATE:
      jj_consume_token(TRUNCATE);
      break;
    case TRANSACTION:
      jj_consume_token(TRANSACTION);
      break;
    case SET:
      jj_consume_token(SET);
      jj_consume_token(TRANSACTION);
      break;
    case LOCK:
      jj_consume_token(LOCK);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * sql_select -> 
 */
  static final public SQLsel sql_select() throws ParseException {
  Token t; Seq cols; Token table; List tables; SQLCond condition;
    if (jj_2_5(3)) {
      jj_consume_token(ALL);
      jj_consume_token(AST);
      jj_consume_token(FROM);
      table = jj_consume_token(SYMB);
                                                            {if (true) return SQLQuery("SELECT ALL * FROM " + table.image);}
    } else if (jj_2_6(3)) {
      jj_consume_token(ALL);
      jj_consume_token(AST);
      jj_consume_token(FROM);
      tables = list();
                                                           {if (true) return SQLQuery("SELECT ALL * FROM " + listToSQL(tables));}
    } else if (jj_2_7(3)) {
      jj_consume_token(DISTINCT);
      jj_consume_token(AST);
      jj_consume_token(FROM);
      table = jj_consume_token(SYMB);
                                                                 {if (true) return SQLQuery("SELECT DISTINCT * FROM " + table.image);}
    } else if (jj_2_8(3)) {
      jj_consume_token(DISTINCT);
      jj_consume_token(AST);
      jj_consume_token(FROM);
      tables = list();
                                                                {if (true) return SQLQuery("SELECT DISTINCT * FROM " + listToSQL(tables));}
    } else if (jj_2_9(3)) {
      jj_consume_token(AST);
      jj_consume_token(FROM);
      table = jj_consume_token(SYMB);
                                                    {if (true) return SQLQuery("SELECT * FROM " + table.image);}
    } else if (jj_2_10(3)) {
      jj_consume_token(AST);
      jj_consume_token(FROM);
      tables = list();
                                                   {if (true) return SQLQuery("SELECT * FROM " + listToSQL(tables));}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * sql_condition -> 
 */

/**
 * SExp -> Symbol | Str | Num | List | SQL_CMD
 */
  static final public SExp sexp() throws ParseException {
        SExp s = null; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEYWORD:
    case SYMB:
      s = symbol();
                     {if (true) return s;}
      break;
    case STRG:
      t = jj_consume_token(STRG);
                   {if (true) return new Str(t.image);}
      break;
    case NUMB:
      t = jj_consume_token(NUMB);
                   {if (true) return new Num(t.image);}
      break;
    case QUOTE:
      t = jj_consume_token(QUOTE);
      s = sexp();
                               {if (true) return new List(new Seq(QUOTE_SYMB, s));}
      break;
    case FUNCTION:
      t = jj_consume_token(FUNCTION);
      s = sexp();
                                  {if (true) return new List(new Seq(FUNCTION_SYMB, s));}
      break;
    case LPAREN:
    case NIL:
      s = list();
                   {if (true) return s;}
      break;
    case ALTER:
    case COMMENT:
    case CREATE:
    case DROP:
    case RENAME:
    case ANALYZE:
    case EXPLAIN:
    case AUDIT:
    case NOAUDIT:
    case GRANT:
    case REVOKE:
    case SET:
    case SELECT:
    case UPDATE:
    case DELETE:
    case INSERT:
    case TRUNCATE:
    case TRANSACTION:
    case LOCK:
      s = sql_cmd();
                      {if (true) return s;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * List -> "(" Seq ")"
 */
  static final public List list() throws ParseException {
        Seq s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      s = seq();
      jj_consume_token(RPAREN);
                                     {if (true) return new List(s);}
      break;
    case NIL:
      jj_consume_token(NIL);
               {if (true) return new List(null);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Seq -> null | SExp Seq
 */
  static final public Seq seq() throws ParseException {
        Seq sq; SExp se;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALTER:
    case COMMENT:
    case CREATE:
    case DROP:
    case RENAME:
    case ANALYZE:
    case EXPLAIN:
    case AUDIT:
    case NOAUDIT:
    case GRANT:
    case REVOKE:
    case SET:
    case SELECT:
    case UPDATE:
    case DELETE:
    case INSERT:
    case TRUNCATE:
    case TRANSACTION:
    case LOCK:
    case LPAREN:
    case NIL:
    case QUOTE:
    case FUNCTION:
    case KEYWORD:
    case NUMB:
    case STRG:
    case SYMB:
      se = sexp();
      sq = seq();
                               {if (true) return new Seq(se, sq);}
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
      {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

/**
 * Symbol -> Symbol | Keyword Symbol
 */
  static final public Symbol symbol() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYMB:
      t = jj_consume_token(SYMB);
                 {if (true) return new Symbol(t.image.toUpperCase());}
      break;
    case KEYWORD:
      jj_consume_token(KEYWORD);
      t = jj_consume_token(SYMB);
                            {if (true) return new Keyword(t.image.toUpperCase());}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(TRANSACTION)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(ROLE)) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_3R_4()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_scan_token(SYMB)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_scan_token(SYMB)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(AST)) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(AST)) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_scan_token(SYMB)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(DISTINCT)) return true;
    if (jj_scan_token(AST)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(DISTINCT)) return true;
    if (jj_scan_token(AST)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(ALL)) return true;
    if (jj_scan_token(AST)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(ALL)) return true;
    if (jj_scan_token(AST)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfe,0xfe,0x200000,0x1f00,0x1fd000,0x1fdffe,0x0,0x1fdffe,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x3fa,0xa,0x3fa,0x240,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
